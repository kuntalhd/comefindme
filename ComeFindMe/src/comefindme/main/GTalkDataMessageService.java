package comefindme.main;import java.util.ArrayList;import java.util.List;import android.app.Service;import android.content.ComponentName;import android.content.Intent;import android.content.ServiceConnection;import android.os.Binder;import android.os.DeadObjectException;import android.os.IBinder;import android.text.TextUtils;import com.google.android.gtalkservice.IGTalkService;import com.google.android.gtalkservice.IGTalkSession;public class GTalkDataMessageService extends Service {	private IGTalkService gTalkService;	private IGTalkSession gTalkSession;	private boolean connected = false;	private List<DataMessage> dataMessageList = new ArrayList<DataMessage>();	private final IBinder mBinder = new LocalBinder();	private List<GTalkSessionCreatedListener> gTalkSessionCreatedListenerList = new ArrayList<GTalkSessionCreatedListener>();	private void bindGTalkService() {		getApplication().bindService((new Intent()).setComponent(com.google.android.gtalkservice.GTalkServiceConstants.GTALK_SERVICE_COMPONENT), mConnection, 0);	}	private boolean isValidUsername(String username) {		if (TextUtils.isEmpty(username) || (username.indexOf('@') == -1))			return false;		return true;	}	@Override	protected void onCreate() {		bindGTalkService();	}	public void sendDataMessage(String gTalkUsername, Intent intent) {		if (connected) {			if (isValidUsername(gTalkUsername))				try {					intent.putExtra(ComeFindMeConstants.FROM_USERNAME_PROPERTY, this.gTalkSession.getUsername());					this.gTalkSession.sendDataMessage(gTalkUsername, intent);				} catch (DeadObjectException e) {					e.printStackTrace();				}			else				throw new IllegalArgumentException("GTalk username " + gTalkUsername + " is not valid.");		}	}	private ServiceConnection mConnection = new ServiceConnection() {		public void onServiceConnected(ComponentName className, IBinder service) {			gTalkService = IGTalkService.Stub.asInterface(service);			try {				gTalkSession = gTalkService.getDefaultSession();				if (gTalkSession == null)					throw new IllegalStateException("Unable to connect to GTalk session. Make sure XMPP settings are set.");				connected = true;				for (GTalkSessionCreatedListener listener : gTalkSessionCreatedListenerList) {					listener.onGTalkSessionCreated(gTalkSession);				}				gTalkSessionCreatedListenerList.clear();			} catch (DeadObjectException ex) {				throw new IllegalStateException("Unable to connect to GTalk session. Make sure XMPP settings are set.");			}		}		public void onServiceDisconnected(ComponentName className) {			gTalkSession = null;		}	};	@Override	public IBinder onBind(Intent intent) {		return mBinder;	}	public class LocalBinder extends Binder {		GTalkDataMessageService getService() {			return GTalkDataMessageService.this;		}	}	public void addGTalkSessionCreatedListener(GTalkSessionCreatedListener listener) {		if (connected)			listener.onGTalkSessionCreated(this.gTalkSession);		else			this.gTalkSessionCreatedListenerList.add(listener);	}	public class DataMessage {		private String username;		private Intent intent;		public DataMessage(String username, Intent intet) {			this.username = username;			this.intent = intet;		}		public String getUsername() {			return username;		}		public void setUsername(String username) {			this.username = username;		}		public Intent getIntent() {			return intent;		}		public void setIntent(Intent intent) {			this.intent = intent;		}	}	public interface GTalkSessionCreatedListener {		public void onGTalkSessionCreated(IGTalkSession session);	}}